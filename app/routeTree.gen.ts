/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as AuthedLogoutImport } from './routes/_authed/logout'
import { Route as AuthedSettingsRouteImport } from './routes/_authed/settings/route'
import { Route as AuthedShareIndexImport } from './routes/_authed/share/index'
import { Route as AuthedShareFileIdImport } from './routes/_authed/share/$fileId'
import { Route as AuthedSettingsSecurityImport } from './routes/_authed/settings/security'
import { Route as AuthedSettingsProfileImport } from './routes/_authed/settings/profile'
import { Route as AuthedRoomRoomIdImport } from './routes/_authed/room/$roomId'

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedLogoutRoute = AuthedLogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSettingsRouteRoute = AuthedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedShareIndexRoute = AuthedShareIndexImport.update({
  id: '/share/',
  path: '/share/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedShareFileIdRoute = AuthedShareFileIdImport.update({
  id: '/share/$fileId',
  path: '/share/$fileId',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSettingsSecurityRoute = AuthedSettingsSecurityImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => AuthedSettingsRouteRoute,
} as any)

const AuthedSettingsProfileRoute = AuthedSettingsProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthedSettingsRouteRoute,
} as any)

const AuthedRoomRoomIdRoute = AuthedRoomRoomIdImport.update({
  id: '/room/$roomId',
  path: '/room/$roomId',
  getParentRoute: () => AuthedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_authed/settings': {
      id: '/_authed/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthedSettingsRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/logout': {
      id: '/_authed/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof AuthedLogoutImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/room/$roomId': {
      id: '/_authed/room/$roomId'
      path: '/room/$roomId'
      fullPath: '/room/$roomId'
      preLoaderRoute: typeof AuthedRoomRoomIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/settings/profile': {
      id: '/_authed/settings/profile'
      path: '/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof AuthedSettingsProfileImport
      parentRoute: typeof AuthedSettingsRouteImport
    }
    '/_authed/settings/security': {
      id: '/_authed/settings/security'
      path: '/security'
      fullPath: '/settings/security'
      preLoaderRoute: typeof AuthedSettingsSecurityImport
      parentRoute: typeof AuthedSettingsRouteImport
    }
    '/_authed/share/$fileId': {
      id: '/_authed/share/$fileId'
      path: '/share/$fileId'
      fullPath: '/share/$fileId'
      preLoaderRoute: typeof AuthedShareFileIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/share/': {
      id: '/_authed/share/'
      path: '/share'
      fullPath: '/share'
      preLoaderRoute: typeof AuthedShareIndexImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedSettingsRouteRouteChildren {
  AuthedSettingsProfileRoute: typeof AuthedSettingsProfileRoute
  AuthedSettingsSecurityRoute: typeof AuthedSettingsSecurityRoute
}

const AuthedSettingsRouteRouteChildren: AuthedSettingsRouteRouteChildren = {
  AuthedSettingsProfileRoute: AuthedSettingsProfileRoute,
  AuthedSettingsSecurityRoute: AuthedSettingsSecurityRoute,
}

const AuthedSettingsRouteRouteWithChildren =
  AuthedSettingsRouteRoute._addFileChildren(AuthedSettingsRouteRouteChildren)

interface AuthedRouteChildren {
  AuthedSettingsRouteRoute: typeof AuthedSettingsRouteRouteWithChildren
  AuthedLogoutRoute: typeof AuthedLogoutRoute
  AuthedRoomRoomIdRoute: typeof AuthedRoomRoomIdRoute
  AuthedShareFileIdRoute: typeof AuthedShareFileIdRoute
  AuthedShareIndexRoute: typeof AuthedShareIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedSettingsRouteRoute: AuthedSettingsRouteRouteWithChildren,
  AuthedLogoutRoute: AuthedLogoutRoute,
  AuthedRoomRoomIdRoute: AuthedRoomRoomIdRoute,
  AuthedShareFileIdRoute: AuthedShareFileIdRoute,
  AuthedShareIndexRoute: AuthedShareIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/settings': typeof AuthedSettingsRouteRouteWithChildren
  '/logout': typeof AuthedLogoutRoute
  '/room/$roomId': typeof AuthedRoomRoomIdRoute
  '/settings/profile': typeof AuthedSettingsProfileRoute
  '/settings/security': typeof AuthedSettingsSecurityRoute
  '/share/$fileId': typeof AuthedShareFileIdRoute
  '/share': typeof AuthedShareIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/settings': typeof AuthedSettingsRouteRouteWithChildren
  '/logout': typeof AuthedLogoutRoute
  '/room/$roomId': typeof AuthedRoomRoomIdRoute
  '/settings/profile': typeof AuthedSettingsProfileRoute
  '/settings/security': typeof AuthedSettingsSecurityRoute
  '/share/$fileId': typeof AuthedShareFileIdRoute
  '/share': typeof AuthedShareIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/settings': typeof AuthedSettingsRouteRouteWithChildren
  '/_authed/logout': typeof AuthedLogoutRoute
  '/_authed/room/$roomId': typeof AuthedRoomRoomIdRoute
  '/_authed/settings/profile': typeof AuthedSettingsProfileRoute
  '/_authed/settings/security': typeof AuthedSettingsSecurityRoute
  '/_authed/share/$fileId': typeof AuthedShareFileIdRoute
  '/_authed/share/': typeof AuthedShareIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/settings'
    | '/logout'
    | '/room/$roomId'
    | '/settings/profile'
    | '/settings/security'
    | '/share/$fileId'
    | '/share'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/settings'
    | '/logout'
    | '/room/$roomId'
    | '/settings/profile'
    | '/settings/security'
    | '/share/$fileId'
    | '/share'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/_authed/settings'
    | '/_authed/logout'
    | '/_authed/room/$roomId'
    | '/_authed/settings/profile'
    | '/_authed/settings/security'
    | '/_authed/share/$fileId'
    | '/_authed/share/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/settings",
        "/_authed/logout",
        "/_authed/room/$roomId",
        "/_authed/share/$fileId",
        "/_authed/share/"
      ]
    },
    "/_authed/settings": {
      "filePath": "_authed/settings/route.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/settings/profile",
        "/_authed/settings/security"
      ]
    },
    "/_authed/logout": {
      "filePath": "_authed/logout.tsx",
      "parent": "/_authed"
    },
    "/_authed/room/$roomId": {
      "filePath": "_authed/room/$roomId.tsx",
      "parent": "/_authed"
    },
    "/_authed/settings/profile": {
      "filePath": "_authed/settings/profile.tsx",
      "parent": "/_authed/settings"
    },
    "/_authed/settings/security": {
      "filePath": "_authed/settings/security.tsx",
      "parent": "/_authed/settings"
    },
    "/_authed/share/$fileId": {
      "filePath": "_authed/share/$fileId.tsx",
      "parent": "/_authed"
    },
    "/_authed/share/": {
      "filePath": "_authed/share/index.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
